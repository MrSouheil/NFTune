[{"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\index.js":"1","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\App.js":"3","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Profile.js":"4","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Marketplace.js":"5","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\NFTpage.js":"6","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\SellNFT.js":"7","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Navbar.js":"8","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\forms.js":"9","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\pinata.js":"10","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\NFTTile.js":"11","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Homepage.js":"12","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\sheet\\Sheet.js":"13","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\links\\Links.js":"14","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\data\\Links.js":"15","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\text\\Text.js":"16","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Navbar\\Navbar.js":"17","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\AboutUs.js":"18","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\button\\Button.js":"19","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Explore.js":"20","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\Cards\\Card.js":"21","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Footer.js":"22","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Contact.js":"23","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\background\\Background.js":"24","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\GetInTouch.js":"25","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\grid\\Grid.js":"26","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Copyrights.js":"27"},{"size":1922,"mtime":1680996913108,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1680990737327,"results":"30","hashOfConfig":"29"},{"size":725,"mtime":1680990737296,"results":"31","hashOfConfig":"29"},{"size":3941,"mtime":1680990737311,"results":"32","hashOfConfig":"29"},{"size":3225,"mtime":1680990737311,"results":"33","hashOfConfig":"29"},{"size":4164,"mtime":1680990737311,"results":"34","hashOfConfig":"29"},{"size":6269,"mtime":1680990737311,"results":"35","hashOfConfig":"29"},{"size":4402,"mtime":1680990737311,"results":"36","hashOfConfig":"29"},{"size":716,"mtime":1680990737311,"results":"37","hashOfConfig":"29"},{"size":2591,"mtime":1680990737327,"results":"38","hashOfConfig":"29"},{"size":870,"mtime":1680990737311,"results":"39","hashOfConfig":"29"},{"size":2567,"mtime":1680990737311,"results":"40","hashOfConfig":"29"},{"size":250,"mtime":1680990737311,"results":"41","hashOfConfig":"29"},{"size":634,"mtime":1680990737311,"results":"42","hashOfConfig":"29"},{"size":335,"mtime":1680990737311,"results":"43","hashOfConfig":"29"},{"size":385,"mtime":1680990737311,"results":"44","hashOfConfig":"29"},{"size":955,"mtime":1680996929089,"results":"45","hashOfConfig":"29"},{"size":1396,"mtime":1680990737311,"results":"46","hashOfConfig":"29"},{"size":657,"mtime":1680990737311,"results":"47","hashOfConfig":"29"},{"size":490,"mtime":1680990737311,"results":"48","hashOfConfig":"29"},{"size":1664,"mtime":1680990737311,"results":"49","hashOfConfig":"29"},{"size":396,"mtime":1681005534914,"results":"50","hashOfConfig":"29"},{"size":1116,"mtime":1681000485115,"results":"51","hashOfConfig":"29"},{"size":271,"mtime":1680996835337,"results":"52","hashOfConfig":"29"},{"size":3188,"mtime":1681005520639,"results":"53","hashOfConfig":"29"},{"size":368,"mtime":1680997435970,"results":"54","hashOfConfig":"29"},{"size":319,"mtime":1681005694199,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},"1bwbs7e",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"60"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"60"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\index.js",["152","153","154","155"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Forms from './components/forms';\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n  Form,\r\n} from \"react-router-dom\";\r\nimport SellNFT from './components/SellNFT';\r\nimport Marketplace from './components/Marketplace';\r\nimport Profile from './components/Profile';\r\nimport NFTPage from './components/NFTpage';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Homepage from './components/Homepage';\r\nimport AboutUs from './components/AboutUs'\r\nimport Explore from './components/Explore';\r\nimport { Nav } from 'react-bootstrap';\r\nimport Footer from './components/Footer/Footer';\r\nimport Background from './components/background/Background';\r\n\r\n\r\nif (typeof web3 !== 'undefined') {\r\n  // web3 is available, proceed with MetaMask functionality\r\n} else {\r\n  // web3 is not available, provide fallback\r\n  window.location.href = \"fallback.html\";\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n  <>\r\n  <Navbar></Navbar>\r\n  <Background></Background>\r\n    <BrowserRouter>\r\n      <Routes>\r\n      <Route path=\"/\" element={<Homepage/>}/>\r\n        <Route path=\"/nftPage\" element={<Marketplace />}/>\r\n        <Route path=\"/about-us\" element={<AboutUs />}/>\r\n        <Route path=\"/sellNFT\" element={<SellNFT />}/> \r\n        <Route path=\"/Explore\" element={<Explore />}/> \r\n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>        \r\n        <Route path=\"/profile\" element={<Profile />}/> \r\n      </Routes>\r\n    </BrowserRouter>\r\n    <Footer></Footer>\r\n    </>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();",[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\reportWebVitals.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\App.js",["156","157","158"],[],"import './App.css';\r\nimport Navbar from './components/Navbar.js';\r\nimport Marketplace from './components/Marketplace';\r\nimport Profile from './components/Profile';\r\nimport SellNFT from './components/SellNFT';\r\nimport NFTPage from './components/NFTpage';\r\nimport ReactDOM from \"react-dom/client\";\r\n\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n        <Routes>\r\n          <Route path=\"/login\" element={<Marketplace />}/>\r\n          <Route path=\"/\" element={<NFTPage />}/>        \r\n          <Route path=\"/profile\" element={<Profile />}/>\r\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>             \r\n        </Routes>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Profile.js",["159","160","161"],[],"import Navbar from \"./Navbar\";\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport NFTTile from \"./NFTTile\";\r\n\r\nexport default function Profile () {\r\n    const [data, updateData] = useState([]);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n    const [address, updateAddress] = useState(\"0x\");\r\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\r\n\r\n    async function getNFTData(tokenId) {\r\n        const ethers = require(\"ethers\");\r\n        let sumPrice = 0;\r\n        //After adding Hardhat network to metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const addr = await signer.getAddress();\r\n\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n\r\n        //create an NFT Token\r\n        let transaction = await contract.getMyNFTs()\r\n\r\n        /*\r\n        * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\r\n        * and creates an object of information that is to be displayed\r\n        */\r\n        \r\n        const items = await Promise.all(transaction.map(async i => {\r\n            const tokenURI = await contract.tokenURI(i.tokenId);\r\n            console.log(\"tokenURI\", tokenURI);\r\n            let meta = await axios.get(tokenURI);\r\n            console.log(\"meta\", meta);\r\n            meta = meta.data;\r\n            console.log(\"meta.data\", meta.data);\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: meta.image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            sumPrice += Number(price);\r\n            return item;\r\n        }))\r\n\r\n        updateData(items);\r\n        updateFetched(true);\r\n        updateAddress(addr);\r\n        updateTotalPrice(sumPrice.toPrecision(3));\r\n    }\r\n\r\n    const params = useParams();\r\n    const tokenId = params.tokenId;\r\n    if(!dataFetched)\r\n        getNFTData(tokenId);\r\n\r\n    return (\r\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\r\n            \r\n            <div className=\"profileClass\">\r\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\r\n                <div className=\"mb-5\">\r\n                    <h2 className=\"font-bold\">Wallet Address</h2>  \r\n                    {address}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\r\n                    <div>\r\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\r\n                        {data.length}\r\n                    </div>\r\n                    <div className=\"ml-20\">\r\n                        <h2 className=\"font-bold\">Total Value</h2>\r\n                        {totalPrice} ETH\r\n                    </div>\r\n            </div>\r\n            <div className=\"flex flex-col text-center items-center mt-11 text-white\">\r\n                <h2 className=\"font-bold\">Your NFTs</h2>\r\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\r\n                    {data.map((value, index) => {\r\n                    return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n                <div className=\"mt-10 text-xl\">\r\n                    {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\":\"\"}\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Marketplace.js",["162"],[],"import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Marketplace() {\r\nconst sampleData = [\r\n    {\r\n        \"name\": \"NFT Placeholder #1\",\r\n        \"description\": \"First NFT Example\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xEd26aAC34faAe9D41431ae733CC54cac73028327\",\r\n    },\r\n    {\r\n        \"name\": \"NFT Placeholder #2\",\r\n        \"description\": \"Second NFT Example\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xEd26aAC34faAe9D41431ae733CC54cac73028327\",\r\n    },\r\n    {\r\n        \"name\": \"NFT Placeholder #3\",\r\n        \"description\": \"Third NFT Example\",\r\n        \"website\":\"http://axieinfinity.io\",\r\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n        \"price\":\"0.03ETH\",\r\n        \"currentlySelling\":\"True\",\r\n        \"address\":\"0xEd26aAC34faAe9D41431ae733CC54cac73028327\",\r\n    },\r\n];\r\nconst [data, updateData] = useState(sampleData);\r\nconst [dataFetched, updateFetched] = useState(false);\r\n\r\nasync function getAllNFTs() {\r\n    const ethers = require(\"ethers\");\r\n    //After adding Hardhat network to metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n    //create an NFT Token\r\n    let transaction = await contract.getAllNFTs()\r\n\r\n    //Fetch all the details of every NFT from the contract and display\r\n    const items = await Promise.all(transaction.map(async i => {\r\n        const tokenURI = await contract.tokenURI(i.tokenId);\r\n        let meta = await axios.get(tokenURI);\r\n        meta = meta.data;\r\n\r\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n        let item = {\r\n            price,\r\n            tokenId: i.tokenId.toNumber(),\r\n            seller: i.seller,\r\n            owner: i.owner,\r\n            image: meta.image,\r\n            name: meta.name,\r\n            description: meta.description,\r\n        }\r\n        return item;\r\n    }))\r\n\r\n    updateFetched(true);\r\n    updateData(items);\r\n}\r\n\r\nif(!dataFetched)\r\n    getAllNFTs();\r\n\r\nreturn (\r\n    <div>\r\n        \r\n        <div className=\"flex flex-col place-items-center mt-20\">\r\n            <div className=\"md:text-xl font-bold text-white\">\r\n                Top NFTs\r\n            </div>\r\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                {data.map((value, index) => {\r\n                    return <NFTTile data={value} key={index}></NFTTile>;\r\n                })}\r\n            </div>\r\n        </div>            \r\n    </div>\r\n);\r\n\r\n}","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\NFTpage.js",["163","164","165","166","167"],[],"import Navbar from \"./Navbar\";\r\nimport axie from \"../tile.jpeg\";\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function NFTPage (props) {\r\n\r\nconst [data, updateData] = useState({});\r\nconst [dataFetched, updateDataFetched] = useState(false);\r\nconst [message, updateMessage] = useState(\"\");\r\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\r\n\r\nasync function getNFTData(tokenId) {\r\n    const ethers = require(\"ethers\");\r\n    //After adding Hardhat network to metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n    //create an NFT Token\r\n    const tokenURI = await contract.tokenURI(tokenId);\r\n    const listedToken = await contract.getListedTokenForId(tokenId);\r\n    let meta = await axios.get(tokenURI);\r\n    meta = meta.data;\r\n    console.log(listedToken);\r\n\r\n    let item = {\r\n        price: meta.price,\r\n        tokenId: tokenId,\r\n        seller: listedToken.seller,\r\n        owner: listedToken.owner,\r\n        image: meta.image,\r\n        name: meta.name,\r\n        description: meta.description,\r\n    }\r\n    console.log(item);\r\n    updateData(item);\r\n    updateDataFetched(true);\r\n    console.log(\"address\", addr)\r\n    updateCurrAddress(addr);\r\n}\r\n\r\nasync function buyNFT(tokenId) {\r\n    try {\r\n        const ethers = require(\"ethers\");\r\n        //After adding Hardhat network to metamask, this code will get providers and signers\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n\r\n        //Pull the deployed contract instance\r\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\r\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\r\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\r\n        //run the executeSale function\r\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\r\n        await transaction.wait();\r\n\r\n        alert('You successfully bought the NFT!');\r\n        updateMessage(\"\");\r\n    }\r\n    catch(e) {\r\n        alert(\"Upload Error\"+e)\r\n    }\r\n}\r\n\r\n    const params = useParams();\r\n    const tokenId = params.tokenId;\r\n    if(!dataFetched)\r\n        getNFTData(tokenId);\r\n\r\n    return(\r\n        <div style={{\"min-height\":\"100vh\"}}>\r\n           \r\n            <div className=\"flex ml-20 mt-20\">\r\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\r\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\r\n                    <div>\r\n                        Name: {data.name}\r\n                    </div>\r\n                    <div>\r\n                        Description: {data.description}\r\n                    </div>\r\n                    <div>\r\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\r\n                    </div>\r\n                    <div>\r\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\r\n                    </div>\r\n                    <div>\r\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\r\n                    </div>\r\n                    <div>\r\n                    { currAddress == data.owner || currAddress == data.seller ?\r\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\r\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\r\n                    }\r\n                    \r\n                    <div className=\"text-green text-center mt-3\">{message}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\SellNFT.js",["168","169"],[],"import Navbar from \"./Navbar\";\r\nimport { useState } from \"react\";\r\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\r\nimport Marketplace from '../Marketplace.json';\r\nimport { useLocation } from \"react-router\";\r\n\r\nexport default function SellNFT () {\r\n    const [formParams, updateFormParams] = useState({ name: '', description: '', price: ''});\r\n    const [fileURL, setFileURL] = useState(null);\r\n    const ethers = require(\"ethers\");\r\n    const [message, updateMessage] = useState('');\r\n    const location = useLocation();\r\n\r\n    //This function uploads the NFT image to IPFS\r\n    async function OnChangeFile(e) {\r\n        var file = e.target.files[0];\r\n        //check for file extension\r\n        try {\r\n            //upload the file to IPFS\r\n            const response = await uploadFileToIPFS(file);\r\n            if(response.success === true) {\r\n                console.log(\"Uploaded image to Pinata: \", response.pinataURL)\r\n                setFileURL(response.pinataURL);\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(\"Error during file upload\", e);\r\n        }\r\n    }\r\n\r\n    //This function uploads the NFT audio to database\r\n    async function OnChangeMusicFile(e) {\r\n        //check for file extension\r\n        //try catch upload file to db\r\n    }\r\n\r\n    //This function uploads the metadata to IPFS\r\n    async function uploadMetadataToIPFS() {\r\n        const {name, description, price} = formParams;\r\n        //Make sure that none of the fields are empty\r\n        if( !name || !description || !price || !fileURL)\r\n            return;\r\n\r\n        const nftJSON = {\r\n            name, description, price, image: fileURL\r\n        }\r\n\r\n        try {\r\n            //upload the metadata JSON to IPFS\r\n            const response = await uploadJSONToIPFS(nftJSON);\r\n            if(response.success === true){\r\n                console.log(\"Uploaded JSON to Pinata: \", response)\r\n                return response.pinataURL;\r\n            }\r\n        }\r\n        catch(e) {\r\n            console.log(\"error uploading JSON metadata:\", e)\r\n        }\r\n    }\r\n\r\n    async function listNFT(e) {\r\n        e.preventDefault();\r\n\r\n        //Upload data to IPFS\r\n        try {\r\n            const metadataURL = await uploadMetadataToIPFS();\r\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            updateMessage(\"Please wait.. uploading (upto 5 mins)\")\r\n\r\n            //Pull the deployed contract instance\r\n            let contract = new ethers.Contract(Marketplace.address, Marketplace.abi, signer)\r\n\r\n            //massage the params to be sent to the create NFT request\r\n            const price = ethers.utils.parseUnits(formParams.price, 'ether')\r\n            let listingPrice = await contract.getListPrice()\r\n            listingPrice = listingPrice.toString()\r\n\r\n            //actually create the NFT\r\n            let transaction = await contract.createToken(metadataURL, price, { value: listingPrice })\r\n            await transaction.wait()\r\n\r\n            alert(\"Successfully listed your NFT!\");\r\n            updateMessage(\"\");\r\n            updateFormParams({ name: '', description: '', price: ''});\r\n            window.location.replace(\"/\")\r\n        }\r\n        catch(e) {\r\n            alert( \"Upload error\"+e )\r\n        }\r\n    }\r\n\r\n    console.log(\"Working\", process.env);\r\n    return (\r\n        <div className=\"\">\r\n        <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\r\n            <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\r\n            <h3 className=\"text-center font-bold text-purple-500 mb-8\">Upload your NFT to the marketplace</h3>\r\n                <div className=\"mb-4\">\r\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">NFT Name</label>\r\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"name\" type=\"text\" placeholder=\"Name\" onChange={e => updateFormParams({...formParams, name: e.target.value})} value={formParams.name}></input>\r\n                </div>\r\n                <div className=\"mb-6\">\r\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"description\">NFT Description</label>\r\n                    <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" cols=\"40\" rows=\"5\" id=\"description\" type=\"text\" placeholder=\"NFT Example, Collection 1, Benefits\" value={formParams.description} onChange={e => updateFormParams({...formParams, description: e.target.value})}></textarea>\r\n                </div>\r\n                <div className=\"mb-6\">\r\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"price\">Price (in ETH)</label>\r\n                    <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"number\" placeholder=\"Min 0.01 ETH\" step=\"0.01\" value={formParams.price} onChange={e => updateFormParams({...formParams, price: e.target.value})}></input>\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"image\">Upload Image</label>\r\n                    <input type={\"file\"} accept=\"video/*|image/*\" onChange={OnChangeFile}></input>\r\n                </div>\r\n                <div>\r\n                    <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"audio\">Upload Audio</label>\r\n                    <input type={\"file\"} accept=\"audio/*\" onChange={OnChangeMusicFile}></input>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"text-green text-center\">{message}</div>\r\n                <button onClick={listNFT} className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\">\r\n                    List NFT\r\n                </button>\r\n            </form>\r\n        </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Navbar.js",["170","171","172","173","174","175","176","177","178"],[],"import logo from '../logo_3.png';\r\nimport fullLogo from '../full_logo.png';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router';\r\n\r\nfunction Navbar(props) {\r\nconst [connected, toggleConnect] = useState(false);\r\nconst location = useLocation();\r\nconst [currAddress, updateAddress] = useState('0x');\r\n\r\nasync function getAddress() {\r\n  const ethers = require(\"ethers\");\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const addr = await signer.getAddress();\r\n  updateAddress(addr);\r\n}\r\nlet ButtonClassNames=`${connected?'hover:bg-green-70 bg-green-500': 'hover:bg-blue-70 bg-blue-500'} text-white font-bold py-2 px-4 rounded text-sm`;\r\n\r\nasync function connectWebsite() {\r\n\r\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n    if(chainId !== '0x5')\r\n    {\r\n      //alert('Incorrect network! Switch your metamask network to Rinkeby');\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: '0x5' }],\r\n     })\r\n    }  \r\n    try{\r\n      if(connected){\r\n        window.ethereum.send({\r\n          method: 'eth_requestAccounts',\r\n          params: [],\r\n          from: window.ethereum.selectedAddress,\r\n        }, function (err, result) {\r\n          if (!err) {\r\n            console.log('Successfully logged out of MetaMask');\r\n            updateAddress(\"0x\")\r\n          } else {\r\n            console.error(err);\r\n          }\r\n        });\r\n        \r\n      }else{\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n        updateAddress(accounts[0])\r\n      }\r\n      \r\n    }\r\n    catch(e){\r\n      console.log(e)\r\n    }\r\n   \r\n}\r\n//recalled on address change\r\nuseEffect(() => {\r\n  if(currAddress=='0x'){\r\n    toggleConnect(false);\r\n  }else{\r\n    toggleConnect(true);\r\n  }\r\n},[currAddress])\r\n  useEffect(() => {\r\n\r\n    window.ethereum.on('accountsChanged', function(accounts){\r\n      window.location.replace(location.pathname)\r\n    })\r\n  });\r\n  //recalled once the user opens the website first\r\n\r\n    return (\r\n      <>\r\n        <nav className=\"w-screen\">\r\n          <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\r\n          <li className='flex items-end ml-5 pb-2'>\r\n            <Link to=\"/\">\r\n            <div className='inline-block font-bold text-xl ml-2'>\r\n              NFT Marketplace\r\n            </div>\r\n            </Link>\r\n          </li>\r\n          <li className='w-2/6'>\r\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\r\n              {location.pathname === \"/\" ? \r\n              <li className='border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/\">Marketplace</Link>\r\n              </li>\r\n              :\r\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/\">Marketplace</Link>\r\n              </li>              \r\n              }\r\n              {location.pathname === \"/sellNFT\" ? \r\n              <li className='border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/sellNFT\">List My NFT</Link>\r\n              </li>\r\n              :\r\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/sellNFT\">List My NFT</Link>\r\n              </li>              \r\n              }              \r\n              {location.pathname === \"/profile\" ? \r\n              <li className='border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/profile\">Profile</Link>\r\n              </li>\r\n              :\r\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\r\n                <Link to=\"/profile\">Profile</Link>\r\n              </li>              \r\n              }  \r\n              <li>\r\n                <button className={ButtonClassNames} onClick={connectWebsite}>{connected? \"Connected\":\"Connect Wallet\"}</button>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n          </ul>\r\n        </nav>\r\n        <div className='text-white text-bold text-right mr-10 text-sm'>\r\n          {currAddress !== \"0x\" ? \"Connected to\":\"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0,15)+'...'):\"\"}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  export default Navbar;","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\forms.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\pinata.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\NFTTile.js",["179","180"],[],"import axie from \"../tile.jpeg\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n  } from \"react-router-dom\";\r\n\r\nfunction NFTTile (data) {\r\n    const newTo = {\r\n        pathname:\"/nftPage/\"+data.data.tokenId\r\n    }\r\n    return (\r\n        <Link to={newTo}>\r\n        <div className=\"border-2 ml-12 mt-5 mb-12 flex flex-col items-center rounded-lg w-48 md:w-72 shadow-2xl\">\r\n            <img src={data.data.image} alt=\"\" className=\"w-72 h-80 rounded-lg object-cover\" />\r\n            <div className= \"text-white w-full p-2 bg-gradient-to-t from-[#454545] to-transparent rounded-lg pt-5 -mt-20\">\r\n                <strong className=\"text-xl\">{data.data.name}</strong>\r\n                <p className=\"display-inline\">\r\n                    {data.data.description}\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default NFTTile;","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Homepage.js",["181","182"],[],"import React from \"react\";\r\nimport Sheet from \"./basic/sheet/Sheet\";\r\nimport Text from \"./basic/text/Text\";\r\nimport mobile from '../assets/mobile.png'\r\nimport metamask from '../assets/metamask.png'\r\nimport Button from \"./basic/button/Button\";\r\n\r\n\r\nconst Homepage = () =>{\r\n    return(\r\n        <>\r\n        \r\n        <section className=\"w-screen relative h-fit mb-10\">\r\n            \r\n            \r\n            <Sheet className=''>\r\n                <div className=\"grid grid-cols-2 items-center\">\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                <Text className={'max-w-[509px] leading-[40px] text-white'} type={'title'}>Discover,Collect,Buy and sell EXTRAORDINARY NFTsongs!</Text>\r\n                <Text className={'mb-[10px] text-white'} type={'subTitle'}>Buy NFT songs and make it yours for eternity</Text>\r\n                <Text className={'max-w-[453px] mb-[30px]'} type={'text'}>A website for buying NFT songs where users can purchase unique, non-fungible tokens (NFTs) that represent ownership rights to specific songs or pieces of music.  </Text>\r\n                <div className=\"flex gap-x-[3.3125rem] items-center mb-[50px]\">\r\n                    <Button>Explore</Button>\r\n                    <a style={{textDecoration:'none'}} href=''><Text className={'text-white'} type={'button'}>learn more</Text></a>\r\n                </div>\r\n                <div className=\"flex gap-[70px]\">\r\n                    <div className=\"flex items-center justify-center flex-col\">\r\n                        <Text type={'data'}>100k</Text>\r\n                        <Text type={'text'}>Total Songs</Text>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-center flex-col\">\r\n                        <Text type={'data'}>40k</Text>\r\n                        <Text type={'text'}>Transactions</Text>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-center flex-col\">\r\n                        <Text type={'data'}>32k</Text>\r\n                        <Text type={'text'}>Users</Text>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <img className=\"max-w-[44rem]\" src={mobile}></img>\r\n                </div>\r\n                <div >\r\n                    <Text type={'text'}>powered by</Text>\r\n                    <img src={metamask} alt='Metamask-Logo'></img>\r\n                </div>\r\n            </Sheet>\r\n                \r\n        </section>\r\n        </>\r\n       \r\n    )\r\n}\r\nexport default Homepage;","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\sheet\\Sheet.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\links\\Links.js",["183","184"],[],"import React,{useState} from \"react\";\r\nimport Text from \"../basic/text/Text\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Links = (props) =>{\r\n    const [active,setActive]= useState(0)\r\n    const {\r\n        data=''\r\n    }=props;\r\n    \r\n    return(\r\n        <div className=\"flex gap-[3.3125rem] w-fit\">\r\n            {data.map(Link => <a style={{textDecoration:'none'}} key={Link.id} onClick={ () => {setActive(Link.id)}} href={Link.link}><Text className={`${Link.id == active ? 'border-b-4 border-[#2EE09A] text-[#2EE09A]' : 'text-white'}`} type={'button'}>{Link.title}</Text></a>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Links","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\data\\Links.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\text\\Text.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Navbar\\Navbar.js",["185"],[],"import React, {useState} from \"react\";\r\nimport logo from '../../assets/logo.png';\r\nimport Links from \"../links/Links\";\r\nimport { Links as data } from \"../../data/Links\";\r\nimport Sheet from \"../basic/sheet/Sheet\";\r\nimport disco from '../../assets/disco.png'\r\nimport Button from \"../basic/button/Button\";\r\n\r\n\r\nconst Navbar = () =>{\r\n    const [navmenu,setNavmenu] = useState(true);\r\n    return(\r\n        <Sheet className=\"mx-auto z-10 relative\">\r\n        <div className={'flex justify-between items-center'}>\r\n            <img className=\"max-w-[8rem]\" src={logo}></img>\r\n            <div className=\"flex gap-[3.3125rem] items-center\">\r\n            {navmenu ?<Links data={data}></Links>:''}\r\n            <img className=\"max-w-[36px] animate-spin h-fit\" alt={'disco-logo'} src={disco} onClick={ () => {setNavmenu(!navmenu)}}></img>\r\n            <Button>My profile</Button>\r\n            </div>\r\n        </div>\r\n        </Sheet>\r\n    )\r\n}\r\nexport default Navbar","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\AboutUs.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\button\\Button.js",["186","187"],[],"import React from 'react'\r\nimport Text from '../text/Text'\r\nconst Button = (props) => {\r\n    const {\r\n        type='button',\r\n        bgColor='#426AF2',\r\n        borderRadius='10px',\r\n        hoverBg='',\r\n        borderColor='#426AF2',\r\n        hoverBorderColor='',\r\n        padding='px-[13px] py-[7px]'\r\n\r\n    }=props\r\n  return (\r\n    <button onClick={props.onClick} type={type} style={{borderColor:borderColor,backgroundColor:bgColor,borderRadius:borderRadius}} className={` border-1 border-solid ${padding}`}>\r\n        <Text className={`text-white`} type={'button'}><strong>{props.children}</strong></Text>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Explore.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\Cards\\Card.js",["188"],[],"import React from 'react'\r\nimport profile1 from '../../../assets/profile1.png';\r\nimport profile2 from '../../../assets/profile2.png';\r\nimport profile3 from '../../../assets/profile3.png';\r\nimport Button from '../button/Button';\r\nimport Text from '../text/Text';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`relative overflow-hidden rounded-[20px] ${props.className} drop-shadow-[-16px_4px_9px_rgba(0,0,0,0.25)]`}>\r\n        <img className='h-full w-full' src={'https://tse2.mm.bing.net/th?id=OIP.kRSxqqns41UFBXWO3_q-iQHaHa&pid=Api&P=0'} alt={'token image'}></img>\r\n        <div className='absolute bottom-0 h-[35%] bg-[rgb(255 255 255 / 60%)] w-full rounded-[20px] bg-white/[.6]'>\r\n            <div className='w-[90%] mx-auto h-full relative'>\r\n                <div className='absolute -translate-y-1/2 flex'>\r\n                    <img alt={'profile'} src={profile1}></img>\r\n                    <img alt={'profile'} src={profile2}></img>\r\n                    <img alt={'profile'} src={profile3}></img>\r\n                </div>\r\n                <div className='flex justify-between h-full items-center'>\r\n                    <div>\r\n                        <Text type={'text'}>NFT:</Text>\r\n                        <Text type={'text'}>Artist:</Text>\r\n                        <Text type={'text'}>Duration:</Text>\r\n                    </div>\r\n                    <div className='flex flex-col gap-[1rem]'>\r\n                        <Button bgColor={'#2EE09A'}>Buy Now</Button>\r\n                        <Button>More</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Footer.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Contact.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\background\\Background.js",["189"],[],"import React from 'react'\r\nimport background from '../../assets/end-bg.jpg'\r\nconst Background = () => {\r\n  return (\r\n    <div className='fixed w-screen h-full left-0 top-0'><img className='w-full h-full' src={background}></img></div>\r\n  ) \r\n}\r\n\r\nexport default Background","C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\GetInTouch.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\basic\\grid\\Grid.js",[],[],"C:\\Users\\user\\Documents\\GitHub\\Senior-Project\\Test Projects\\NFT-Marketplace\\src\\components\\Footer\\Copyrights.js",[],[],{"ruleId":"190","severity":1,"message":"191","line":4,"column":8,"nodeType":"192","messageId":"193","endLine":4,"endColumn":11},{"ruleId":"190","severity":1,"message":"194","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":13},{"ruleId":"190","severity":1,"message":"195","line":11,"column":3,"nodeType":"192","messageId":"193","endLine":11,"endColumn":7},{"ruleId":"190","severity":1,"message":"196","line":21,"column":10,"nodeType":"192","messageId":"193","endLine":21,"endColumn":13},{"ruleId":"190","severity":1,"message":"197","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":14},{"ruleId":"190","severity":1,"message":"198","line":7,"column":8,"nodeType":"192","messageId":"193","endLine":7,"endColumn":16},{"ruleId":"190","severity":1,"message":"199","line":10,"column":3,"nodeType":"192","messageId":"193","endLine":10,"endColumn":16},{"ruleId":"190","severity":1,"message":"197","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"190","severity":1,"message":"200","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":21},{"ruleId":"201","severity":1,"message":"202","line":94,"column":34,"nodeType":"203","messageId":"204","endLine":94,"endColumn":36},{"ruleId":"190","severity":1,"message":"197","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"190","severity":1,"message":"197","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"190","severity":1,"message":"205","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":12},{"ruleId":"190","severity":1,"message":"200","line":3,"column":10,"nodeType":"192","messageId":"193","endLine":3,"endColumn":21},{"ruleId":"201","severity":1,"message":"202","line":96,"column":35,"nodeType":"203","messageId":"204","endLine":96,"endColumn":37},{"ruleId":"201","severity":1,"message":"202","line":96,"column":64,"nodeType":"203","messageId":"204","endLine":96,"endColumn":66},{"ruleId":"190","severity":1,"message":"197","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":14},{"ruleId":"190","severity":1,"message":"206","line":12,"column":11,"nodeType":"192","messageId":"193","endLine":12,"endColumn":19},{"ruleId":"190","severity":1,"message":"207","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":12},{"ruleId":"190","severity":1,"message":"208","line":2,"column":8,"nodeType":"192","messageId":"193","endLine":2,"endColumn":16},{"ruleId":"190","severity":1,"message":"209","line":4,"column":20,"nodeType":"192","messageId":"193","endLine":4,"endColumn":26},{"ruleId":"190","severity":1,"message":"210","line":5,"column":3,"nodeType":"192","messageId":"193","endLine":5,"endColumn":9},{"ruleId":"190","severity":1,"message":"211","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":8},{"ruleId":"190","severity":1,"message":"212","line":8,"column":3,"nodeType":"192","messageId":"193","endLine":8,"endColumn":16},{"ruleId":"190","severity":1,"message":"213","line":9,"column":3,"nodeType":"192","messageId":"193","endLine":9,"endColumn":12},{"ruleId":"190","severity":1,"message":"214","line":19,"column":16,"nodeType":"192","messageId":"193","endLine":19,"endColumn":26},{"ruleId":"201","severity":1,"message":"202","line":67,"column":17,"nodeType":"203","messageId":"204","endLine":67,"endColumn":19},{"ruleId":"190","severity":1,"message":"205","line":1,"column":8,"nodeType":"192","messageId":"193","endLine":1,"endColumn":12},{"ruleId":"190","severity":1,"message":"209","line":3,"column":22,"nodeType":"192","messageId":"193","endLine":3,"endColumn":28},{"ruleId":"215","severity":1,"message":"216","line":25,"column":21,"nodeType":"217","endLine":25,"endColumn":64},{"ruleId":"218","severity":1,"message":"219","line":43,"column":17,"nodeType":"217","endLine":43,"endColumn":61},{"ruleId":"190","severity":1,"message":"220","line":3,"column":10,"nodeType":"192","messageId":"193","endLine":3,"endColumn":14},{"ruleId":"201","severity":1,"message":"202","line":12,"column":163,"nodeType":"203","messageId":"204","endLine":12,"endColumn":165},{"ruleId":"218","severity":1,"message":"219","line":15,"column":13,"nodeType":"217","endLine":15,"endColumn":54},{"ruleId":"190","severity":1,"message":"221","line":8,"column":9,"nodeType":"192","messageId":"193","endLine":8,"endColumn":16},{"ruleId":"190","severity":1,"message":"222","line":10,"column":9,"nodeType":"192","messageId":"193","endLine":10,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":11,"column":9,"nodeType":"217","endLine":11,"endColumn":142},{"ruleId":"218","severity":1,"message":"219","line":5,"column":57,"nodeType":"217","endLine":5,"endColumn":105},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Forms' is defined but never used.","'Form' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'useLocation' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axie' is defined but never used.","'location' is assigned a value but never used.","'logo' is defined but never used.","'fullLogo' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'getAddress' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Link' is defined but never used.","'hoverBg' is assigned a value but never used.","'hoverBorderColor' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop."]